<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://waterkaiwhite.github.io/record</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://waterkaiwhite.github.io/record</link></image><lastBuildDate>Wed, 03 Apr 2024 16:00:20 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>axios初理解</title><link>https://waterkaiwhite.github.io/record/post/axios-chu-li-jie.html</link><description>1. 响应拦截器的response处理200-299的响应码，其他的由error处理&#13;
2. 响应拦截器返回response.data，其实就是后端返回的数据，里面一般包括三个部分，code，message，data&#13;
3. 如果由pinia的actions中的函数对response.data进行处理，即根据code进行判断，这里是业务类型的响应码处理&#13;
4. axios的error其类型是AxiosError，而业务类型的error一般直接使用内置Error，要注意它们内部的属于是不一样的。</description><guid isPermaLink="true">https://waterkaiwhite.github.io/record/post/axios-chu-li-jie.html</guid><pubDate>Wed, 03 Apr 2024 15:59:52 +0000</pubDate></item><item><title>nginx跨域之always参数</title><link>https://waterkaiwhite.github.io/record/post/nginx-kua-yu-zhi-always-can-shu.html</link><description>nginx配置了Access-Control-Allow-Origin，服务端响应码200时，前端无跨域问题，响应非200时出现跨域问题。</description><guid isPermaLink="true">https://waterkaiwhite.github.io/record/post/nginx-kua-yu-zhi-always-can-shu.html</guid><pubDate>Tue, 02 Apr 2024 15:49:47 +0000</pubDate></item><item><title>vue导入导出的区别</title><link>https://waterkaiwhite.github.io/record/post/vue-dao-ru-dao-chu-de-qu-bie.html</link><description>## import {xxx} from "path" &#13;
用于导入模块中导出的一个或多个特定的绑定（变量、函数、类等）。</description><guid isPermaLink="true">https://waterkaiwhite.github.io/record/post/vue-dao-ru-dao-chu-de-qu-bie.html</guid><pubDate>Mon, 01 Apr 2024 15:09:37 +0000</pubDate></item><item><title>random use</title><link>https://waterkaiwhite.github.io/record/post/random%20use.html</link><description>1.random&#13;
2.randint/randrange&#13;
3.uniform&#13;
4.shuffle&#13;
5.choices&#13;
6.seed&#13;
7.sample。</description><guid isPermaLink="true">https://waterkaiwhite.github.io/record/post/random%20use.html</guid><pubDate>Sun, 31 Mar 2024 16:04:07 +0000</pubDate></item></channel></rss>